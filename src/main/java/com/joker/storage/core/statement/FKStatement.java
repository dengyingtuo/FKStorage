package com.joker.storage.core.statement;

import com.joker.storage.core.Session;
import com.joker.storage.core.model.SqlNode;
import com.joker.storage.core.param.ParamMap;
import com.joker.storage.core.processor.Processor;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class FKStatement implements Statement {
    protected Session session;
    protected  boolean closed = false;

    protected  List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
    protected  Processor preProcessor;

    public FKStatement(Session session) {
        this.session = session;
        session.addStatement(this);
    }


    @Override
    public ResultSet executeQuery(String sql) throws SQLException { execute(sql); return preProcessor.getResultSet(); }
    @Override
    public int executeUpdate(String sql) throws SQLException { execute(sql); return preProcessor.getUpdateCount(); }
    @Override
    public boolean execute(String sql) throws SQLException { return execute(sql, RETURN_GENERATED_KEYS); }
    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        execute(sql, autoGeneratedKeys);
        return preProcessor.getUpdateCount();
    }
    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        checkClosed();
        sqlNodes.add(new SqlNode(sql, new ParamMap()));
        preProcessor = session.execute(sqlNodes);
        sqlNodes.clear();
        return preProcessor.isUpdate();
    }


    @Override
    public void addBatch(String sql) throws SQLException { checkClosed(); sqlNodes.add(new SqlNode(sql, new ParamMap())); }
    @Override
    public void clearBatch() throws SQLException { checkClosed(); sqlNodes.clear(); }
    @Override
    public int[] executeBatch() throws SQLException {
        checkClosed();
        preProcessor = session.execute(sqlNodes);
        return preProcessor.getBatchUpdateCounts();
    }


    @Override
    public ResultSet getGeneratedKeys() throws SQLException { checkClosed(); return preProcessor.getGeneratedKeys(); }
    @Override
    public ResultSet getResultSet() throws SQLException { checkClosed(); return preProcessor.getResultSet(); }
    @Override
    public int getUpdateCount() throws SQLException { checkClosed(); return preProcessor.getUpdateCount(); }
    @Override
    public boolean getMoreResults(int current) throws SQLException { checkClosed(); return preProcessor.getMoreResults(current); }
    @Override
    public boolean getMoreResults() throws SQLException { return getMoreResults(Statement.CLOSE_CURRENT_RESULT); }


    @Override
    public Connection getConnection() throws SQLException { checkClosed(); return session.getConnection(); }
    @Override
    public boolean isClosed() throws SQLException { return closed; }
    @Override
    public void close() throws SQLException { checkClosed(); session.delStatement(this); closed=true; }


    protected void checkClosed() throws SQLException {
        if(closed) {
            throw new SQLException("statement is closed");
        }
    }


    /******* not support ********/
    @Override
    public int getMaxFieldSize() throws SQLException {throw new SQLException("not support");}
    @Override
    public void setMaxFieldSize(int max) throws SQLException {throw new SQLException("not support");}
    @Override
    public int getMaxRows() throws SQLException {throw new SQLException("not support");}
    @Override
    public void setMaxRows(int max) throws SQLException {throw new SQLException("not support");}
    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {throw new SQLException("not support");}
    @Override
    public int getQueryTimeout() throws SQLException {throw new SQLException("not support");}
    @Override
    public void setQueryTimeout(int seconds) throws SQLException {throw new SQLException("not support");}
    @Override
    public void cancel() throws SQLException {throw new SQLException("not support");}
    @Override
    public SQLWarning getWarnings() throws SQLException {throw new SQLException("not support");}
    @Override
    public void clearWarnings() throws SQLException {throw new SQLException("not support");}
    @Override
    public void setCursorName(String name) throws SQLException {throw new SQLException("not support");}
    @Override
    public void setFetchDirection(int direction) throws SQLException {throw new SQLException("not support");}
    @Override
    public int getFetchDirection() throws SQLException {throw new SQLException("not support");}
    @Override
    public void setFetchSize(int rows) throws SQLException {throw new SQLException("not support");}
    @Override
    public int getFetchSize() throws SQLException {throw new SQLException("not support");}
    @Override
    public int getResultSetConcurrency() throws SQLException {throw new SQLException("not support");}
    @Override
    public int getResultSetType() throws SQLException {throw new SQLException("not support");}
    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {throw new SQLException("not support");}
    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {throw new SQLException("not support");}
    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {throw new SQLException("not support");}
    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {throw new SQLException("not support");}
    @Override
    public int getResultSetHoldability() throws SQLException {throw new SQLException("not support");}
    @Override
    public void setPoolable(boolean poolable) throws SQLException {throw new SQLException("not support");}
    @Override
    public boolean isPoolable() throws SQLException {throw new SQLException("not support");}
    @Override
    public void closeOnCompletion() throws SQLException {throw new SQLException("not support");}
    @Override
    public boolean isCloseOnCompletion() throws SQLException {throw new SQLException("not support");}
    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {throw new SQLException("not support");}
    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {throw new SQLException("not support");}
}
